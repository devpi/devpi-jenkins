#!/usr/bin/env python
"""
A jenkins uploadtrigger bootstrap script to automatically install devpi
in a virtualenv and then run "devpi use" and "devpi test". 
"""

__version__ = '1.0'

import sys
import os
import re
from os import path
import shutil

from subprocess import Popen, PIPE, check_call, CalledProcessError
import tarfile

USETOXDEV=os.environ.get('USETOXDEV', False)

PY3 = sys.version_info[0] == 3

if PY3:
    from urllib.request import urlretrieve
else:
    from urllib import urlretrieve


def log(msg, *args):
    if args:
        msg = msg % args
    sys.stderr.write("bootstrap: %s\n" % msg)
    sys.stderr.flush()

def run(cmd, shell=True):
    """Run the given command in shell"""
    log('running command: %s', cmd)
    check_call(cmd, shell=shell)


def crun(cmd, shell=True):
    """Run the given command and return its output"""
    log('running command (for output): %s', cmd)
    p = Popen(cmd, stdout=PIPE, shell=shell)
    stdout, stderr = p.communicate()
    return stdout


def wget(url):
    """Download the given file to current directory"""
    log('downloading %s', url)
    basename = path.basename(url)
    localpath = path.join(os.getcwd(), basename)
    urlretrieve(url, localpath)
    return localpath


def has_script(venv, name):
    """Check if the virtualenv has the given script

    Looks for bin/$name (unix) or Scripts/$name.exe (windows) in the virtualenv
    """
    if sys.platform == 'win32':
        return any([path.exists(path.join(venv, 'Scripts', name)),
                    path.exists(path.join(venv, 'Scripts', name + '.exe'))])
    else:
        return path.exists(path.join(venv, 'bin', name))

def activate_path(venv):
    """Return the full path to the script virtualenv directory"""
    if sys.platform == 'win32':
        p = path.abspath(path.join(venv, 'Scripts'))
    else:
        p = path.abspath(path.join(venv, 'bin'))
    assert path.exists(p), p
    os.environ['PATH'] = p + os.pathsep + os.environ['PATH']
    log("added to PATH: %s", p)

def get_script_path(venv, name):
    """Return the full path to the script in virtualenv directory"""
    if sys.platform == 'win32':
        p = path.join(venv, 'Scripts', name)
        if not path.exists(p):
            p = path.join(venv, 'Scripts', name + '.exe')
    else:
        p = path.join(venv, 'bin', name)

    if not path.exists(p):
        raise NameError('cannot find a script named "%s"' % (name,))

    return path.abspath(p)


def get_package_version(venv, name):
    """Return the installed version of a package. """
    py = get_script_path(venv, 'python')
    s = 'import devpi,sys; sys.stdout.write(str(%s.__version__))' % name
    if sys.version_info[:2] >= (2, 6):
        return crun('%s -s -c "%s"' % (py, s))
    else:
        return crun('%s -c "%s"' % (py, s))


def ensuredir(p):
    if not path.isdir(p):
        os.makedirs(p)

def get_virtualenv(virtualenvtar_url):
    basename = path.basename(virtualenvtar_url)
    log("matching %s", basename)
    dirname = re.match("(virtualenv-.*).tar.gz", basename).group(1)
    vdir = path.abspath(dirname)
    virtualenv_script = path.join(vdir, "virtualenv.py")
    if not path.exists(virtualenv_script):
        if path.exists(vdir):
            shutil.rmtree(vdir)
        archive = wget(virtualenvtar_url)
        log("got %s", archive)
        tar = tarfile.open(archive, "r:gz")
        tar.extractall()
        tar.close()
        assert path.exists(vdir)
        log("extracted %s", vdir)
    assert path.exists(virtualenv_script)
    return virtualenv_script

class Devpi:
    def __init__(self, basedir, script):
        self.basedir = basedir
        self.script = script 

    def __call__(self, *args):
        argv = list(args)
        assert args
        clientdir = path.join(self.basedir, ".devpiclient")
        try:
            self.run([self.script, "--clientdir=%s" % clientdir] + argv,
                shell=False)
        except CalledProcessError:
            _, e, _ = sys.exc_info()
            log('exited with error code %d', e.returncode)
            sys.exit(e.returncode)

    def run(self, *args, **kwargs):
        return run(*args, **kwargs)

def activate_devpi_script(TENV, virtualenvtar_url, devpi_install_index):
    log('bootstrap version %s', __version__)
    log("devpi bootstrap env is/shall be at: %s" % TENV)

    os.environ['PATH'] = TENV + os.path.pathsep + os.environ['PATH']
    # create virtual environment
    if not has_script(TENV, 'devpi'):
        virtualenv_path = get_virtualenv(virtualenvtar_url)
        run([sys.executable, virtualenv_path, TENV], shell=False)

    assert has_script(TENV, 'python'), 'no python script'
    assert has_script(TENV, 'pip'), 'no pip script'
    activate_path(TENV)

    pip = get_script_path(TENV, 'pip')

    # reinstall always for now
    run('%s install --pre -i %s --force-reinstall --upgrade devpi-client' % (
        pip, devpi_install_index))
    assert has_script(TENV, 'devpi')
    return get_script_showversion(TENV, "devpi")

def get_script_showversion(TENV, name):
    version = get_package_version(TENV, name)
    assert has_script(TENV, name)
    script = path.abspath(get_script_path(TENV, name))
    log('%s is installed at %s, version is %s', name, script, version)
    return script

def main(indexurl = "{INDEXURL}",
         virtualenvtar_url = "{VIRTUALENVTARURL}",
         devpi_install_index = "{DEVPI_INSTALL_INDEX}",
         testspec = "{TESTSPEC}"):
    log("starting Jenkins job for %s" % testspec)
    basedir = os.getcwd()

    # prepare a TMPDIR that resides in the Jenkins workspace
    # for installing devpi itself
    OLD_TMPDIR = os.environ.get("TMPDIR")
    os.environ["TMPDIR"] = tmpdir = path.join(basedir, "TMP")
    ensuredir(tmpdir)

    # prepare a virtualenv for installing devpi-client
    TENV = path.join(basedir, "_devpi")
    script = activate_devpi_script(TENV, virtualenvtar_url,
                                   devpi_install_index)

    devpi = Devpi(basedir, script)

    # invoke the just-installed devpi client
    devpi("use", indexurl)

    # reset the TMPDIR because test invokes tox and
    # using an in-workspace work dir would create 
    # very long pathnames which often cause problems
    if OLD_TMPDIR:
        os.environ["TMPDIR"] = OLD_TMPDIR
    else:
        del os.environ["TMPDIR"]
    devpi("test", testspec)

if __name__ == '__main__':
    main()
